{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","active","isRed","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColor","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tootips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d27d23cf.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, active, isRed, total, ...props }) {\r\n  return (\r\n    <Card\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n      onClick={props.onClick}\r\n    >\r\n      <CardContent>\r\n        {/* Title + Coronavirus Cases */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n\r\n        {/* +120k Number of Case */}\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        {/* 1.2M Total */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle, Popup } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\n\r\nconst casesTypeColor = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, ,16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125,215,29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  }\r\n}\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n return sortedData.sort((a, b) => a.cases > b.cases ? -1 : 1);\r\n};\r\n\r\nexport const prettyPrintStat = (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\n// Draw circles on map with interactive tooltop\r\nexport const showDataOnMap = (data, casesType=\"cases\") => (\r\n  data.map(country => (\r\n    <Circle \r\n    center={[country.countryInfo.lat, country.countryInfo.long]}\r\n    fillOpacity={0.4}\r\n    color={casesTypeColor[casesType].hex}\r\n    fillColor={casesTypeColor[casesType].hex}\r\n    radius={\r\n      Math.sqrt(country[casesType]) * casesTypeColor[casesType].multiplier\r\n    }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div className=\"info-flag\" style={{ backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-cases\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n          <div className=\"info-recovered\">Recovered: {numeral(country.cases).format(\"0,0\")}</div>\r\n          <div className=\"info-deaths\">Deaths: {numeral(country.cases).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ))\r\n)","import React from \"react\";\r\nimport { Map as LeafMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap<a> contributors'\r\n        />\r\n        {/* Loop through and draw circles on the screen */}\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport numeral from \"numeral\"\r\nimport './Table.css';\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({country, cases}) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tootips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  }\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({casesType = \"cases\"}) {\r\n  const [data, setData] = useState({});\r\n\r\n  // https://disease.sh/v3/covid-19/historical/all?lastdays=30\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          // clever stuff here...\r\n\r\n          let chartData = buildChartData(data, \"cases\");\r\n          console.log(\"chart Data >>>>>\", chartData);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useEffect, useState } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport \"./App.css\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  // STATE = How to write a variable in REACT\n\n  // https://disease.sh/v3/covid-19/countries\n\n  // useEffect = Runs a piece of code\n  // based on a given condition\n\n  useEffect(() => {\n    // The code inside here will run once\n    // when the component loads and not again\n\n    // async =>> send a request, wait for it, do something with it.\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        })\n        .then();\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        // All of the data...\n        // from the country response\n        setCountryInfo(data);\n\n        console.log(\"data=>>>>>>\", data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19-TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              {/* Loop through all the countries and show a drop down list of the option */}\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        <div className=\"app__states\">\n          <InfoBox\n            isRed\n            active={casesType === 'cases'}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n\n          <InfoBox\n           active={casesType === 'recovered'}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n\n          <InfoBox\n            isRed\n           active={casesType === 'deaths'}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n      </div>\n\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          {/* Table */}\n          <h3>Worldwide new {casesType}</h3>\n          <LineGraph casesType={casesType}/>\n          {/* Graph */}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}